from cProfile import label
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

q_learn_data = pd.read_csv("q_learn.csv").to_numpy()
leach_data = pd.read_csv("leach.csv").to_numpy()
beemh_data = pd.read_csv("beemh.csv").to_numpy()
kmeans_data = pd.read_csv("kmeans.csv").to_numpy()
nmleach_data = pd.read_csv("nmleach.csv").to_numpy()
ql_eebdg_data = pd.read_csv("ql_eebdg.csv").to_numpy()
dt_data = pd.read_csv("dt.csv").to_numpy()
proposed_data = pd.read_csv("ql_lof.csv").to_numpy()

iters = [0,200,400,600,800,1000,1200,1400,1600,1800,2000]

throughput = plt.figure()
plt.title("throughput ratio")
plt.plot([iter for iter in iters],[q_learn_data[i][0]for i in range(len(iters))],figure = throughput,color = 'magenta',label = 'Q_learning')
plt.plot([iter for iter in iters],[leach_data[i][0]for i in range(len(iters))],figure = throughput,color = 'blue',label = 'LEACH')
plt.plot([iter for iter in iters],[beemh_data[i][0]for i in range(len(iters))],figure = throughput,color = 'yellow',label = 'BEEMH')
plt.plot([iter for iter in iters],[kmeans_data[i][0]for i in range(len(iters))],figure = throughput,color = 'green',label = 'K-Means++')
plt.plot([iter for iter in iters],[nmleach_data[i][0]for i in range(len(iters))],figure = throughput,color = 'cyan',label = 'NM-LEACH')
plt.plot([iter for iter in iters],[ql_eebdg_data[i][0]for i in range(len(iters))],figure = throughput,color = 'orange',label = 'QL-EEBDG')
plt.plot([iter for iter in iters],[dt_data[i][0]for i in range(len(iters))],figure = throughput,color = 'brown',label = 'Direct Transmission')
plt.plot([iter for iter in iters],[proposed_data[i][0]for i in range(len(iters))],figure = throughput,color = 'red',label = 'Proposed')
plt.legend()
plt.savefig("Throughput.png")

life = plt.figure()
plt.title("Network Life")
plt.plot([iter for iter in iters],[q_learn_data[i][1]for i in range(len(iters))],figure = life,color = 'magenta',label = 'Q_learning')
plt.plot([iter for iter in iters],[leach_data[i][1]for i in range(len(iters))],figure = life,color = 'blue',label = 'LEACH')
plt.plot([iter for iter in iters],[beemh_data[i][1]for i in range(len(iters))],figure = life,color = 'yellow',label = 'BEEMH')
plt.plot([iter for iter in iters],[kmeans_data[i][1]for i in range(len(iters))],figure = life,color = 'green',label = 'K-Means++')
plt.plot([iter for iter in iters],[nmleach_data[i][1]for i in range(len(iters))],figure = life,color = 'cyan',label = 'NM-LEACH')
plt.plot([iter for iter in iters],[ql_eebdg_data[i][1]for i in range(len(iters))],figure = life,color = 'orange',label = 'QL-EEBDG')
plt.plot([iter for iter in iters],[dt_data[i][1]for i in range(len(iters))],figure = life,color = 'brown',label = 'Direct Transmission')
plt.plot([iter for iter in iters],[proposed_data[i][1]for i in range(len(iters))],figure = life,color = 'red',label = 'Proposed')
plt.legend()
plt.savefig("Life.png")

energy = plt.figure()
plt.title("Total Network Energy")
plt.plot([iter for iter in iters],[q_learn_data[i][2]for i in range(len(iters))],figure = energy,color = 'magenta',label = 'Q_learning')
plt.plot([iter for iter in iters],[leach_data[i][2]for i in range(len(iters))],figure = energy,color = 'blue',label = 'LEACH')
plt.plot([iter for iter in iters],[beemh_data[i][2]for i in range(len(iters))],figure = energy,color = 'yellow',label = 'BEEMH')
plt.plot([iter for iter in iters],[kmeans_data[i][2]for i in range(len(iters))],figure = energy,color = 'green',label = 'K-Means++')
plt.plot([iter for iter in iters],[nmleach_data[i][2]for i in range(len(iters))],figure = energy,color = 'cyan',label = 'NM-LEACH')
plt.plot([iter for iter in iters],[ql_eebdg_data[i][2]for i in range(len(iters))],figure = energy,color = 'orange',label = 'QL-EEBDG')
plt.plot([iter for iter in iters],[dt_data[i][2]for i in range(len(iters))],figure = energy,color = 'brown',label = 'Direct Transmission')
plt.plot([iter for iter in iters],[proposed_data[i][2]for i in range(len(iters))],figure = energy,color = 'red',label = 'Proposed')
plt.legend()
plt.savefig("Energy.png")

latency = plt.figure()
plt.title("Avg. Data Latency")
plt.plot([iter for iter in iters],[q_learn_data[i][3]for i in range(len(iters))],figure = latency,color = 'magenta',label = 'Q_learning')
plt.plot([iter for iter in iters],[leach_data[i][3]for i in range(len(iters))],figure = latency,color = 'blue',label = 'LEACH')
plt.plot([iter for iter in iters],[beemh_data[i][3]for i in range(len(iters))],figure = latency,color = 'yellow',label = 'BEEMH')
plt.plot([iter for iter in iters],[kmeans_data[i][3]for i in range(len(iters))],figure = latency,color = 'green',label = 'K-Means++')
plt.plot([iter for iter in iters],[nmleach_data[i][3]for i in range(len(iters))],figure = latency,color = 'cyan',label = 'NM-LEACH')
plt.plot([iter for iter in iters],[ql_eebdg_data[i][3]for i in range(len(iters))],figure = latency,color = 'orange',label = 'QL-EEBDG')
plt.plot([iter for iter in iters],[dt_data[i][3]for i in range(len(iters))],figure = latency,color = 'brown',label = 'Direct Transmission')
plt.plot([iter for iter in iters],[proposed_data[i][3]for i in range(len(iters))],figure = latency,color = 'red',label = 'Proposed')
plt.legend()
plt.savefig("Latency.png")

energy_balance = plt.figure()
plt.title("Energy Balance")
plt.plot([iter for iter in iters],[q_learn_data[i][4]for i in range(len(iters))],figure = energy_balance,color = 'magenta',label = 'Q_learning')
plt.plot([iter for iter in iters],[leach_data[i][4]for i in range(len(iters))],figure = energy_balance,color = 'blue',label = 'LEACH')
plt.plot([iter for iter in iters],[beemh_data[i][4]for i in range(len(iters))],figure = energy_balance,color = 'yellow',label = 'BEEMH')
plt.plot([iter for iter in iters],[kmeans_data[i][4]for i in range(len(iters))],figure = energy_balance,color = 'green',label = 'K-Means++')
plt.plot([iter for iter in iters],[nmleach_data[i][4]for i in range(len(iters))],figure = energy_balance,color = 'cyan',label = 'NM-LEACH')
plt.plot([iter for iter in iters],[ql_eebdg_data[i][4]for i in range(len(iters))],figure = energy_balance,color = 'orange',label = 'QL-EEBDG')
plt.plot([iter for iter in iters],[dt_data[i][4]for i in range(len(iters))],figure = energy_balance,color = 'brown',label = 'Direct Transmission')
plt.plot([iter for iter in iters],[proposed_data[i][4]for i in range(len(iters))],figure = energy_balance,color = 'red',label = 'Proposed')
plt.legend()
plt.savefig("Energy_Balance.png")

plt.show()